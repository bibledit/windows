Building Bibledit for Windows through Visual Studio
===================================================


There is a git repository on Windows 11 and there's one on macOS. 
Keep both repositories in sync. 
This ensures that the data on both operating systems are in sync.
Visual Studio is used on Windows for building Bibledit for Windows.
On macOS there's a script that refreshes the source of the Bibledit library.


Handling keyboard events works through a global keyboard hook in Windows.


Folder "server" contains the Bibledit library. Build the Release x64 version from within Visual Studio. It produces server.exe.


Folder "gui" contains the Bibledit interface. Build it from within Visual Studio. It produces bibledit.exe. 


To create a package, use Inno Setup 6.


Free legal Windows virtual images for testing are available from https://dev.modern.ie/tools/vms/windows/


The server.exe needs the Visual C++ Redistributable Package for Visual Studio 2022. 
Inno Setup installs it.


A code signing certificate was purchased from https://www.startssl.com. 
The certificate is valid from 2017-01-21 till 2020-04-21. 
Two certificates were downloaded from StartSSL: 
- Intermediate.crt
- CommonName.crt
The signtool.exe needs a certificate.pfx format:
$ openssl pkcs12 -export -out CommonName.pfx -inkey codesign.key -in CommonName.crt -password pass:""
Copy the .pfx file to the Windows developer machine.


Tutorial for using Microsoft's embedded webcontrol:
https://learn.microsoft.com/en-us/microsoft-edge/webview2/get-started/winforms
https://learn.microsoft.com/en-us/microsoft-edge/webview2/concepts/distribution?tabs=dotnetcsharp


Native arm64 version
====================

Creating a native ARM64 Bibledit app

Install Visual Studio 2022 for ARM.

Open the Configuration Manager and create a coonfiguration for Release / ARM64, and use that.

Open Project Properties, go to C/C++ / Language. Set the C++ Language Standard to C++17.

The modifications for arm64 are kept in branch arm64 in git.
Rebase this branch regularly on the master branch.
$ git fetch
$ git checkout master
$ git pull
$ git checkout arm64
$ git rebase master
$ git push --force

